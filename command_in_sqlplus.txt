sqlplus WHSC/KurOracle#1234#@129.150.34.9:1521/dddsid_pdb1.sub04040741160.vcn01.oraclevcn.com

['approve','process','reject','super-process']

CONNECT WHSC/KurOracle#1234#@//129.150.34.9:1521/dddsid_pdb1.sub04040741160.vcn01.oraclevcn.com AS SYSDBA

sqlplus "WHSC/KurOracle#1234#@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(Host=129.150.34.9)(Port=1521))(CONNECT_DATA=(SERVICE_NAME = dddsid_pdb1.sub04040741160.vcn01.oraclevcn.com)))"

select sys_context('userenv','hostâ€™) from dual;


FILE_ID="your_file_id_here" FILENAME="your_desired_file_name.ext" CONFIRM=$(wget --quiet "https://drive.google.com/uc?export=download&id=${FILE_ID}" -O- | \ sed -r "s/.*confirm=([0-9A-Za-z_]+).*/\1/")
 wget -O ${FILENAME} "https://drive.google.com/uc?export=download&confirm=${CONFIRM}&id=${FILE_ID}"


FILE_ID="14AfjejfqXmEgX3SEA4pqWamzjnnGpLuf" 
FILENAME="oracle-database-ee-19c-1.0-1.x86_64.rpm" 
CONFIRM=$(wget --quiet "https://drive.google.com/uc?export=download&id=${FILE_ID}" -O- | \ sed -r "s/.*confirm=([0-9A-Za-z_]+).*/\1/") 
wget -O ${FILENAME} "https://drive.google.com/uc?export=download&confirm=${CONFIRM}&id=${FILE_ID}"


/var/www/vhosts/wolfspirit.tech/httpdocs



Mon Jul 01 23:07:45.570688 2024

select table_name from user_tables;

ALTER TABLE users ADD ( id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY );

ALTER TABLE users ADD (id NUMBER(20) not null);


ALTER TABLE user_infos ADD CONSTRAINT pk_users PRIMARY KEY (id);

ALTER TABLE user_infos ADD CONSTRAINT province FOREIGN KEY (province_id) REFERENCES provinces (id);
ALTER TABLE user_infos ADD CONSTRAINT district FOREIGN KEY (district_id) REFERENCES districts (id);
ALTER TABLE user_infos ADD CONSTRAINT sub_district FOREIGN KEY (district_id) REFERENCES sub_districts (id);

ALTER TABLE user_infos ADD CONSTRAINT fk_province_send FOREIGN KEY (province_send_id) REFERENCES provinces (id);
ALTER TABLE user_infos ADD CONSTRAINT fk_district_send FOREIGN KEY (district_send_id) REFERENCES districts (id);
ALTER TABLE user_infos ADD CONSTRAINT fk_sub_district_send FOREIGN KEY (district_send_id) REFERENCES sub_districts (id);


//brand
CREATE TABLE brands ( id NUMBER(20) , name_en VARCHAR2(255) NOT NULL, name_th VARCHAR2(255) NOT NULL, image VARCHAR2(255) DEFAULT NULL, created_at TIMESTAMP DEFAULT NULL, updated_at TIMESTAMP DEFAULT NULL, CONSTRAINT pk_brands PRIMARY KEY (id) );

CREATE SEQUENCE brand_seq START WITH 1;

CREATE OR REPLACE TRIGGER dept_bir 
BEFORE INSERT ON brands 
FOR EACH ROW
BEGIN
  SELECT brand_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/



//brand model
CREATE TABLE brand_models ( id NUMBER(20) NOT NULL, brand_id NUMBER(20) DEFAULT NULL, old_sku VARCHAR2(255) NOT NULL, sku VARCHAR2(255) NOT NULL, name_en VARCHAR2(255) NOT NULL, name_th VARCHAR2(255) NOT NULL, month NUMBER(2) NOT NULL, day NUMBER(2) NOT NULL, sub_class VARCHAR2(255) DEFAULT NULL, sub_department VARCHAR2(255) DEFAULT NULL, created_at TIMESTAMP DEFAULT NULL, updated_at TIMESTAMP DEFAULT NULL, CONSTRAINT pk_brand_models PRIMARY KEY (id), CONSTRAINT fk_brand_models_brand FOREIGN KEY (brand_id) REFERENCES brands(id) );

CREATE SEQUENCE brand_model_seq START WITH 1;

CREATE OR REPLACE TRIGGER brand_model_bir 
BEFORE INSERT ON brand_models 
FOR EACH ROW
BEGIN
  SELECT brand_model_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

//export status
CREATE TABLE export_statuses ( id NUMBER(20) NOT NULL, is_export NUMBER(1) NOT NULL, created_at TIMESTAMP DEFAULT NULL, updated_at TIMESTAMP DEFAULT NULL, CONSTRAINT pk_export_statuses PRIMARY KEY (id) );

CREATE SEQUENCE pk_export_statuses START WITH 1;

//jobs
CREATE TABLE jobs ( id NUMBER(20) NOT NULL, queue VARCHAR2(255) NOT NULL, payload CLOB NOT NULL, attempts NUMBER(3) NOT NULL, reserved_at NUMBER(10) DEFAULT NULL, available_at NUMBER(10) NOT NULL, created_at NUMBER(10) NOT NULL, CONSTRAINT pk_jobs PRIMARY KEY (id) );

CREATE SEQUENCE pk_jobs START WITH 1;

//password resets
CREATE TABLE password_resets ( id NUMBER(20) NOT NULL, user_id NUMBER(20) NOT NULL, token VARCHAR2(255) NOT NULL, created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_password_resets PRIMARY KEY (id) );

CREATE SEQUENCE pk_password_resets START WITH 1;

//store
CREATE TABLE stores ( id NUMBER(20) NOT NULL, province VARCHAR2(255) NOT NULL, name_en VARCHAR2(255) NOT NULL, name_th VARCHAR2(255) NOT NULL, image VARCHAR2(255) NOT NULL, created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_stores PRIMARY KEY (id) );

CREATE SEQUENCE store_seq START WITH 1;

CREATE OR REPLACE TRIGGER store_bir 
BEFORE INSERT ON stores 
FOR EACH ROW
BEGIN
  SELECT store_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

//product
CREATE TABLE products ( id NUMBER(20) NOT NULL, brand_model_id NUMBER(20), user_id NUMBER(20), store_id NUMBER(20), additional_request NUMBER(1) DEFAULT 0 NOT NULL, slip VARCHAR2(255) NOT NULL, extra_month NUMBER(11), extra_day NUMBER(11), status VARCHAR2(20) CHECK (status IN ('approve', 'process', 'reject', 'super-process')) NOT NULL, buying_date DATE NOT NULL, created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_products PRIMARY KEY (id), CONSTRAINT fk_brand_model FOREIGN KEY (brand_model_id) REFERENCES brand_models(id), CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id), CONSTRAINT fk_store FOREIGN KEY (store_id) REFERENCES stores(id) );

CREATE SEQUENCE product_seq START WITH 1;

CREATE OR REPLACE TRIGGER product_bir 
BEFORE INSERT ON products 
FOR EACH ROW
BEGIN
  SELECT product_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

//additional warranty product
CREATE TABLE additional_warranty_products ( id NUMBER(20) NOT NULL, product_id NUMBER(20), month NUMBER(11), day NUMBER(11), status VARCHAR2(20) CHECK (status IN ('approve', 'process', 'reject', 'super-process')) NOT NULL, image VARCHAR2(255), refer_code VARCHAR2(255), not_correct VARCHAR2(20) CHECK (not_correct IN ('document', 'packaging', 'advertise', 'other')) NOT NULL, other VARCHAR2(255), user_id NUMBER(20), created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_additional_warranty_products PRIMARY KEY (id), CONSTRAINT fk_product_additional FOREIGN KEY (product_id) REFERENCES products(id), CONSTRAINT fk_user_additional FOREIGN KEY (user_id) REFERENCES users(id) );

CREATE SEQUENCE additional_warranty_product_seq START WITH 1;

CREATE OR REPLACE TRIGGER additional_warranty_product_bir 
BEFORE INSERT ON additional_warranty_products 
FOR EACH ROW
BEGIN
  SELECT additional_warranty_product_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

//product cancel
CREATE TABLE product_cancels ( id NUMBER(20) NOT NULL, product_id NUMBER(20), additional_warranty_product_id NUMBER(20), no_document NUMBER(1), not_condition NUMBER(1), other CLOB, is_super NUMBER(1) NOT NULL, created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_product_cancels PRIMARY KEY (id), CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES products(id), CONSTRAINT fk_additional_warranty FOREIGN KEY (additional_warranty_product_id) REFERENCES products(id) );

CREATE SEQUENCE product_cancel_seq START WITH 1;

CREATE OR REPLACE TRIGGER product_cancel_bir 
BEFORE INSERT ON product_cancels 
FOR EACH ROW
BEGIN
  SELECT product_cancel_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/


//user
CREATE TABLE token_generates ( id NUMBER(20) NOT NULL, user_id NUMBER(20), token VARCHAR2(255) NOT NULL, expired DATE, admin_id NUMBER(20), limit NUMBER(11) NOT NULL, now NUMBER(11) NOT NULL, last_call TIMESTAMP NOT NULL, last_login TIMESTAMP, session_id VARCHAR2(255), created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_token_generates PRIMARY KEY (id), CONSTRAINT fk_user_token_generate FOREIGN KEY (user_id) REFERENCES users(id) );

CREATE SEQUENCE token_generate_seq START WITH 1;

CREATE OR REPLACE TRIGGER token_generate_bir 
BEFORE INSERT ON token_generates 
FOR EACH ROW
BEGIN
  SELECT token_generate_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

//upload_status
CREATE TABLE upload_statuses ( id NUMBER(20) NOT NULL, is_upload NUMBER(1) NOT NULL, created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL, CONSTRAINT pk_upload_statuses PRIMARY KEY (id) );

CREATE SEQUENCE pk_user_info START WITH 1;


CREATE OR REPLACE TRIGGER pk_auto_stores 
BEFORE INSERT ON "WHSC"."STORES" 
FOR EACH ROW 
WHEN (NEW."ID" IS NULL) 
BEGIN
	 SELECT pk_stores.NEXTVAL
	 INTO :NEW."ID" 
	FROM dual; 
END;
/
ALTER TABLE WHSC.STORES MODIFY (IMAGE VARCHAR2(255) NULL);


3 hours, 41 minutes+1 hour, 37 minutes+1 hour, 43 minutes


CREATE SEQUENCE pk_user START WITH 1;

ALTER TABLE users ADD (
  CONSTRAINT pk_user PRIMARY KEY (ID));



CREATE SEQUENCE user_seq START WITH 1;

CREATE OR REPLACE TRIGGER user_bir 
BEFORE INSERT ON users 
FOR EACH ROW
BEGIN
  SELECT user_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

CREATE SEQUENCE user_info_seq START WITH 1;

CREATE OR REPLACE TRIGGER user_info_bir 
BEFORE INSERT ON user_infos 
FOR EACH ROW
BEGIN
  SELECT user_info_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
/

CREATE OR REPLACE TRIGGER enum_user
BEFORE INSERT OR UPDATE ON users
FOR EACH ROW
BEGIN
    IF :NEW.type NOT IN (1, 2, 3) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Invalid type: ' || :NEW.type || '. Allowed values are 1 (superadmin), 2 (admin), 3 (user).');
    END IF;
END;
/

SELECT trigger_name FROM user_triggers;


SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'PRODUCTS';
/
ALTER TABLE PRODUCTS DROP CONSTRAINT SYS_C008655;

alter table product_cancels add constraint FK_ADDITIONAL_WARRANTY foreign key (additional_warranty_product_id) references additional_warranty_products (id);